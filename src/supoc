#!/usr/bin/python3.6
from textx import metamodel_from_str
from textx.exceptions import TextXSyntaxError
import argparse
import logging
import operator
import os
import sys

from supo.grammar import *
import supo.generator.kernel, supo.generator.host, supo.generator.header, supo.generator.utils

logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger(__name__)

def main():
    if (sys.version_info.major, sys.version_info.minor) < (3, 6):
        raise Exception('Python 3.6+ is needed for correct result')
    parser = argparse.ArgumentParser(prog='supoc', description='Stencil with Unrolling and Pipelining Optimization (SUPO) compiler')
    parser.add_argument('--verbose', '-v',
                        action='count',
                        dest='verbose',
                        help='increase verbosity')
    parser.add_argument('--quiet', '-q',
                        action='count',
                        dest='quiet',
                        help='decrease verbosity')
    parser.add_argument('--burst-width',
                        type=int,
                        dest='burst_width',
                        help='override burst width')
    parser.add_argument('--unroll-factor',
                        type=int,
                        metavar='UNROLL_FACTOR',
                        dest='unroll_factor',
                        help='override unroll factor')
    parser.add_argument('--tile-size',
                        type=int,
                        nargs='+',
                        metavar='TILE_SIZE',
                        dest='tile_size',
                        help='override tile size; 0 means no overriding on that dimension')
    parser.add_argument('--dram-bank',
                        type=int,
                        dest='dram_bank',
                        help='override DRAM bank num')
    parser.add_argument('--dram-separate',
                        type=str,
                        metavar='(yes|no)',
                        dest='dram_separate',
                        help='override DRAM separation')
    parser.add_argument('--iterate',
                        type=int,
                        metavar='#ITERATION',
                        dest='iterate',
                        help='override iterate directive; repeat execution multiple times iteratively')
    parser.add_argument('--border',
                        type=str,
                        metavar='(ignore|preserve)',
                        dest='border',
                        help='override border handling strategy')
    parser.add_argument(type=str,
                        dest='supo_src',
                        metavar='file',
                        help='supo source code')
    parser.add_argument('--output-dir', '-o',
                        type=str,
                        dest='output_dir',
                        metavar='dir',
                        help='directory to generate kernel, source, and header; default names used; default to the current working directory; may be overridden by --kernel-file, --source-file, or --header-file')
    parser.add_argument('--kernel-file',
                        type=str,
                        dest='kernel_file',
                        metavar='file',
                        help='Vivado HLS C++ kernel code; overrides --output-dir')
    parser.add_argument('--source-file',
                        type=str,
                        dest='host_file',
                        metavar='file',
                        help='host C++ source code; overrides --output-dir')
    parser.add_argument('--header-file',
                        type=str,
                        dest='header_file',
                        metavar='file',
                        help='host C++ header code; overrides --output-dir')

    args = parser.parse_args()
    verbose = 0 if args.verbose is None else args.verbose
    quiet = 0 if args.quiet is None else args.quiet
    logging_level = (quiet-verbose)*10+logger.getEffectiveLevel()
    if logging_level > logging.CRITICAL:
        logging_level = logging.CRITICAL
    if logging_level < logging.DEBUG:
        logging_level = logging.DEBUG
    logger.setLevel(logging_level)
    logger.info('set log level to '+logging.getLevelName(logging_level))
    # TODO: check tile size

    supo_mm = metamodel_from_str(supo_grammar, classes=[SupoProgram, Expression, Term, Factor, Operand, ExtraParam, Input, Output, OutputExpr, Intermediate])
    logger.info('build metamodel')
    try:
        if args.supo_src=='-':
            supo_file_name = sys.stdin.name
            supo_model = supo_mm.model_from_str(sys.stdin.read())
        else:
            with open(args.supo_src, 'r') as supo_file:
                supo_model = supo_mm.model_from_str(supo_file.read())
                supo_file_name = supo_file.name
        logger.info('%s parsed as supo file' % supo_file_name)
    except TextXSyntaxError as e:
        logger.error(e)
        sys.exit(1)
    except SemanticError as e:
        logger.error(e)
        sys.exit(1)
    except SemanticWarn as w:
        logger.warn(w)
    else:
        stencil = supo.generator.utils.Stencil(
            burst_width = args.burst_width if args.burst_width is not None else supo_model.burst_width,
            dram_bank = args.dram_bank if args.dram_bank is not None else supo_model.dram_bank,
            border = args.border if args.border is not None else supo_model.border,
            iterate = args.iterate if args.iterate is not None else supo_model.iterate,
            app_name = supo_model.app_name,
            input = supo_model.input,
            output = supo_model.output,
            intermediates = supo_model.intermediates,
            dim = supo_model.dim,
            extra_params = supo_model.extra_params,
            tile_size = [args.tile_size[i] if args.tile_size is not None and i<len(args.tile_size) and args.tile_size[i] > 0 else supo_model.tile_size[i] for i in range(supo_model.dim-1)]+[0],
            unroll_factor = args.unroll_factor if args.unroll_factor is not None else supo_model.unroll_factor,
            dram_separate = args.dram_separate=='yes' if args.dram_separate is not None else supo_model.dram_separate)

        logger.debug('kernel        : %s' % stencil.app_name)
        logger.debug('burst width   : %d' % stencil.burst_width)
        logger.debug('dram bank  : %d' % ((stencil.dram_bank*2) if stencil.dram_separate else stencil.dram_bank))
        logger.debug('dram separate : %s' % ('yes' if stencil.dram_separate else 'no'))
        logger.debug('unroll factor : %d' % stencil.unroll_factor)
        logger.debug('tile size     : (%s,)' % ', '.join([str(x) for x in stencil.tile_size[:-1]]))
        logger.debug('dimension     : %d' % stencil.dim)
        logger.debug('input name    : %s' % stencil.input.name)
        logger.debug('input type    : %s' % stencil.input.type)
        logger.debug('input channel : %d' % stencil.input.chan)
        logger.debug('output name   : %s' % stencil.output.name)
        logger.debug('output type   : %s' % stencil.output.type)
        logger.debug('output channel: %d' % stencil.output.chan)
        for p in stencil.extra_params:
            logger.debug('extra params  : %s' % str(p))

        if args.kernel_file is not None:
            if args.kernel_file=='-':
                supo.generator.kernel.PrintCode(stencil, sys.stdout)
            else:
                with open(args.kernel_file, 'w') as kernel_file:
                    supo.generator.kernel.PrintCode(stencil, kernel_file)

        if args.host_file is not None:
            if args.host_file=='-':
                supo.generator.host.PrintCode(stencil, sys.stdout)
            else:
                with open(args.host_file, 'w') as host_file:
                    supo.generator.host.PrintCode(stencil, host_file)

        if args.header_file is not None:
            if args.header_file=='-':
                supo.generator.header.PrintCode(stencil, sys.stdout)
            else:
                with open(args.header_file, 'w') as header_file:
                    supo.generator.header.PrintCode(stencil, header_file)

        if args.output_dir is not None or args.kernel_file is None and args.host_file is None and args.header_file is None:
            if args.kernel_file is None:
                with open(os.path.join(args.output_dir if args.output_dir is not None else '', '%s_kernel-tile%s-unroll%d-%dddr%s.cpp' % (supo_model.app_name, 'x'.join(['%d'%x for x in supo_model.tile_size[0:-1]]), supo_model.k, supo_model.dram_bank, '-separated' if supo_model.dram_separate else '')), 'w') as kernel_file:
                    supo.generator.kernel.PrintCode(stencil, kernel_file)
            if args.host_file is None:
                with open(os.path.join(args.output_dir if args.output_dir is not None else '', '%s.cpp' % supo_model.app_name), 'w') as host_file:
                    supo.generator.host.PrintCode(stencil, host_file)
            if args.header_file is None:
                with open(os.path.join(args.output_dir if args.output_dir is not None else '', '%s.h' % supo_model.app_name), 'w') as header_file:
                    supo.generator.header.PrintCode(stencil, header_file)

if __name__ == '__main__':
    main()
